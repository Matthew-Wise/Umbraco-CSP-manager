{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "UmbracoFormsSchema",
  "type": "object",
  "properties": {
    "Umbraco": {
      "$ref": "#/definitions/UmbracoDefinition"
    }
  },
  "definitions": {
    "UmbracoDefinition": {
      "type": "object",
      "description": "Configuration container for all Umbraco products.",
      "properties": {
        "Forms": {
          "$ref": "#/definitions/UmbracoFormsDefinition"
        }
      }
    },
    "UmbracoFormsDefinition": {
      "type": "object",
      "description": "Configuration of Umbraco Forms.",
      "properties": {
        "FormDesign": {
          "$ref": "#/definitions/FormDesignSettings"
        },
        "Options": {
          "$ref": "#/definitions/PackageOptionSettings"
        },
        "Security": {
          "$ref": "#/definitions/SecuritySettings"
        },
        "FieldTypes": {
          "$ref": "#/definitions/FieldTypesDefinition"
        }
      }
    },
    "FormDesignSettings": {
      "type": "object",
      "description": "Defines configuration settings related to form design.",
      "properties": {
        "Defaults": {
          "description": "Gets or sets the default form settings.",
          "oneOf": [
            {
              "$ref": "#/definitions/DefaultFormSettings"
            }
          ]
        },
        "DisableAutomaticAdditionOfDataConsentField": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the data consent field should be automatically added to new forms."
        },
        "DisableDefaultWorkflow": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the default workflow should be disabled for new forms."
        },
        "MaxNumberOfColumnsInFormGroup": {
          "type": "integer",
          "description": "Gets or set the maximum number of columns that can be added to a form group.",
          "format": "int32"
        },
        "DefaultTheme": {
          "type": "string",
          "description": "Gets or sets the default theme to use when rendering forms where the editor hasn't selected a theme."
        },
        "DefaultEmailTemplate": {
          "type": "string",
          "description": "Gets or sets a relative path, within Views/Partials, to the default email template used in Razor email workflows."
        },
        "RemoveProvidedEmailTemplate": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the out of the box email template should be hidden from selection."
        },
        "RemoveProvidedFormTemplates": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the out of the box forms templates should be hidden from selection."
        },
        "FormElementHtmlIdPrefix": {
          "type": "string",
          "description": "Gets or sets a value used to prefix the page, fieldset and field Id values used when rendering the form HTML Id attributes."
        },
        "SettingsCustomization": {
          "description": "Gets or sets a set of values for customization of field and workflow settings.",
          "oneOf": [
            {
              "$ref": "#/definitions/SettingsCustomization"
            }
          ]
        },
        "MandatoryFieldsetLegends": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether fieldset legends are mandatory."
        }
      }
    },
    "DefaultFormSettings": {
      "type": "object",
      "description": "Defines defaults for created forms.",
      "properties": {
        "ManualApproval": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the form requires manual approval."
        },
        "DisableStylesheet": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the form requires manual approval."
        },
        "MarkFieldsIndicator": {
          "description": "Gets or sets the form field indication behaviour.",
          "oneOf": [
            {
              "$ref": "#/definitions/FormFieldIndication"
            }
          ]
        },
        "Indicator": {
          "type": "string",
          "description": "Gets or sets the default form field indicator."
        },
        "RequiredErrorMessage": {
          "type": "string",
          "description": "Gets or sets the default error message for a missing but required form field entry."
        },
        "InvalidErrorMessage": {
          "type": "string",
          "description": "Gets or sets the default error message for an invalid form field entry."
        },
        "ShowValidationSummary": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the validation summary should be shown."
        },
        "HideFieldValidationLabels": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether field validation labels should be hidden."
        },
        "NextPageButtonLabel": {
          "type": "string",
          "description": "Gets or sets the default next page button label for multi-step forms."
        },
        "PreviousPageButtonLabel": {
          "type": "string",
          "description": "Gets or sets the default previous page button label for multi-step forms."
        },
        "SubmitButtonLabel": {
          "type": "string",
          "description": "Gets or sets the default submit button label."
        },
        "MessageOnSubmit": {
          "type": "string",
          "description": "Gets or sets the default message shown to the user on submission."
        },
        "MessageOnSubmitIsHtml": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the form's message to display on submission is in HTML format."
        },
        "StoreRecordsLocally": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether form submissions (records) should be stored in the local database."
        },
        "AutocompleteAttribute": {
          "type": "string",
          "description": "Gets or sets a value for the default autocomplete attribute applied to rendered forms."
        },
        "DaysToRetainSubmittedRecordsFor": {
          "type": "integer",
          "description": "Gets or sets a value for the number of days to retain submitted records.",
          "format": "int32"
        },
        "DaysToRetainApprovedRecordsFor": {
          "type": "integer",
          "description": "Gets or sets a value for the number of days to retain approved records.",
          "format": "int32"
        },
        "DaysToRetainRejectedRecordsFor": {
          "type": "integer",
          "description": "Gets or sets a value for the number of days to retain rejected records.",
          "format": "int32"
        }
      }
    },
    "FormFieldIndication": {
      "type": "string",
      "description": "Enumeration for field indications.",
      "x-enumNames": [
        "NoIndicator",
        "MarkMandatoryFields",
        "MarkOptionalFields"
      ],
      "enum": [
        "NoIndicator",
        "MarkMandatoryFields",
        "MarkOptionalFields"
      ]
    },
    "SettingsCustomization": {
      "type": "object",
      "properties": {
        "DataSourceTypes": {
          "$ref": "#/definitions/ProviderSettingsCustomization"
        },
        "FieldTypes": {
          "$ref": "#/definitions/ProviderSettingsCustomization"
        },
        "PrevalueSourceTypes": {
          "$ref": "#/definitions/ProviderSettingsCustomization"
        },
        "WorkflowTypes": {
          "$ref": "#/definitions/ProviderSettingsCustomization"
        }
      }
    },
    "ProviderSettingsCustomization": {
      "type": "object",
      "description": "Defines configuration settings for the customization of field or workflow settings."
    },
    "PackageOptionSettings": {
      "type": "object",
      "description": "Defines settings for package runtime options.",
      "properties": {
        "IgnoreWorkFlowsOnEdit": {
          "type": "string",
          "description": "Gets or sets a value indicating whether workflows should be ignored on edit."
        },
        "AllowEditableFormSubmissions": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether form submission can be edited."
        },
        "AppendQueryStringOnRedirectAfterFormSubmission": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether to append a querystring on redirect after form submission."
        },
        "CultureToUseWhenParsingDatesForBackOffice": {
          "type": "string",
          "description": "Gets or sets a value useful for or setups that have a single front-end website culture but potentially different\nback-office cultures for editors.\nThis setting can be used to force parsing of persisted date values with the culture used to store them, for display\nin the back-office."
        },
        "TriggerConditionsCheckOn": {
          "type": "string",
          "description": "Gets or sets a value that allows control over the client-side event used to trigger conditional checks.\nValid values are \"change\" (the default) or \"input\"."
        },
        "ScheduledRecordDeletion": {
          "description": "Gets or sets settings related to the data deletion service.",
          "oneOf": [
            {
              "$ref": "#/definitions/ScheduledRecordDeletionSettings"
            }
          ]
        },
        "DisableRecordIndexing": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether form submissions (records) will be indexed by Examine."
        },
        "EnableFormsApi": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the Forms headless/AJAX API endpoints are available."
        },
        "EnableRecordingOfIpWithFormSubmission": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether to record the IP address of the user submitting the form."
        },
        "DisableClientSideValidationDependencyCheck": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether to disable the client side validation framework dependency check."
        },
        "DisableRelationTracking": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether to disable form/content relation tracking."
        },
        "TrackRenderedFormsStorageMethod": {
          "description": "Gets or sets a value indicating what storage method to use for tracking forms rendered for the purpose\nof rendering associated scripts and form data.",
          "oneOf": [
            {
              "$ref": "#/definitions/TrackRenderedFormsStorageMethodOption"
            }
          ]
        }
      }
    },
    "ScheduledRecordDeletionSettings": {
      "type": "object",
      "description": "Defines settings relating to automatic data deletion.",
      "properties": {
        "Enabled": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether data deletion is enabled.",
          "default": false
        },
        "FirstRunTime": {
          "type": "string",
          "description": "Gets or sets a value for the first run time of the data deletion service."
        },
        "Period": {
          "type": "string",
          "description": "Gets or sets a value for the period of the data deletion operations.",
          "format": "duration",
          "default": "1.00:00:00"
        }
      }
    },
    "TrackRenderedFormsStorageMethodOption": {
      "type": "string",
      "description": "Defines options for tracking form rendering for later rendering of scripts.",
      "x-enumNames": [
        "TempData",
        "HttpContextItems"
      ],
      "enum": [
        "TempData",
        "HttpContextItems"
      ]
    },
    "SecuritySettings": {
      "type": "object",
      "description": "Defines security related settings.",
      "properties": {
        "DisallowedFileUploadExtensions": {
          "type": "string",
          "description": "Gets or sets a value listing the file extensions that are disallowed for upload for all forms."
        },
        "AllowedFileUploadExtensions": {
          "type": "string",
          "description": "Gets or sets a value listing the only file extensions that are allowed for upload for all forms."
        },
        "EnableAntiForgeryToken": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether anti-forgery tokens should be used on forms."
        },
        "SavePlainTextPasswords": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether saving plain text passwords is allowed."
        },
        "DisableFileUploadAccessProtection": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the protection for access of file uploads is disabled"
        },
        "ManageSecurityWithUserGroups": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the permissions are managed at the group level."
        },
        "GrantAccessToNewFormsForUserGroups": {
          "type": "string",
          "description": "Gets or sets a comma seperated list of user group aliases that will be granted access automatically to new forms, when\nManageSecurityWithUserGroups is set to true."
        },
        "DefaultUserAccessToNewForms": {
          "description": "Gets or sets a value indicating whether users are automatically granted access to newly created forms.",
          "oneOf": [
            {
              "$ref": "#/definitions/FormAccess"
            }
          ]
        },
        "FormsApiKey": {
          "type": [
            "null",
            "string"
          ],
          "description": "Gets or sets the API key configured for authorization of server-to-server Forms API requests."
        },
        "EnableAntiForgeryTokenForFormsApi": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether anti-forgery tokens should be used on form submissions carried out via the headless/AJAX API."
        }
      }
    },
    "FormAccess": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Grant",
        "Deny"
      ],
      "enum": [
        "Grant",
        "Deny"
      ]
    },
    "FieldTypesDefinition": {
      "type": "object",
      "description": "Configuration of field types.",
      "properties": {
        "DatePicker": {
          "$ref": "#/definitions/DatePickerSettings"
        },
        "Recaptcha2": {
          "$ref": "#/definitions/Recaptcha2Settings"
        },
        "Recaptcha3": {
          "$ref": "#/definitions/Recaptcha3Settings"
        },
        "RichText": {
          "$ref": "#/definitions/RichTextSettings"
        }
      }
    },
    "DatePickerSettings": {
      "type": "object",
      "description": "Defines security settings relating to the date picker field type.",
      "properties": {
        "DatePickerYearRange": {
          "type": "integer",
          "description": "Gets or sets the range of years to allow selection from.",
          "format": "int32"
        }
      }
    },
    "Recaptcha2Settings": {
      "type": "object",
      "description": "Defines security settings relating to the Recaptcha2 field type.",
      "properties": {
        "PublicKey": {
          "type": "string",
          "description": "Gets or sets the public key."
        },
        "PrivateKey": {
          "type": "string",
          "description": "Gets or sets the private key."
        }
      }
    },
    "Recaptcha3Settings": {
      "type": "object",
      "description": "Defines security settings relating to the Recaptcha3 field type.",
      "properties": {
        "SiteKey": {
          "type": "string",
          "description": "Gets or sets the site key."
        },
        "PrivateKey": {
          "type": "string",
          "description": "Gets or sets the private key."
        },
        "Domain": {
          "description": "Gets or sets the domain to use for retrieving the reCAPTCHA assets.",
          "default": "Google",
          "oneOf": [
            {
              "$ref": "#/definitions/RecaptchaDomain"
            }
          ]
        },
        "VerificationUrl": {
          "type": "string",
          "description": "Gets or sets the URL used for server-side verification of the reCAPTCHA response.",
          "format": "uri",
          "default": "https://www.google.com/recaptcha/api/siteverify"
        },
        "ShowFieldValidation": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether field level validation messages should be shown."
        }
      }
    },
    "RecaptchaDomain": {
      "type": "string",
      "description": "Defines options for the domain used for requesting client-side assets and the host for the reCAPTCHA cookie domain.",
      "x-enumNames": [
        "Google",
        "Recaptcha"
      ],
      "enum": [
        "Google",
        "Recaptcha"
      ]
    },
    "RichTextSettings": {
      "type": "object",
      "description": "Defines security settings relating to the rich text field type.",
      "properties": {
        "DataTypeId": {
          "type": "string",
          "description": "Gets or sets the rich text data type Id.",
          "format": "guid"
        }
      }
    }
  }
}