// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetDefinitionsData, GetDefinitionsResponses, GetDefinitionsErrors, PostDefinitionsSaveData, PostDefinitionsSaveResponses, PostDefinitionsSaveErrors, GetDirectivesData, GetDirectivesResponses, GetDirectivesErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Definitions {
    public static getDefinitions<ThrowOnError extends boolean = true>(options?: Options<GetDefinitionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDefinitionsResponses, GetDefinitionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/Definitions',
            ...options
        });
    }
    
    public static postDefinitionsSave<ThrowOnError extends boolean = true>(options?: Options<PostDefinitionsSaveData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDefinitionsSaveResponses, PostDefinitionsSaveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/Definitions/save',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class Directives {
    public static getDirectives<ThrowOnError extends boolean = true>(options?: Options<GetDirectivesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDirectivesResponses, GetDirectivesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/Directives',
            ...options
        });
    }
}