<Project Sdk="Microsoft.NET.Sdk.Razor">
	<PropertyGroup>
		<TargetFramework>net9.0</TargetFramework>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<AddRazorSupportForMvc>true</AddRazorSupportForMvc>
		<StaticWebAssetBasePath>/</StaticWebAssetBasePath>
		<EnableDefaultContentItems>true</EnableDefaultContentItems>
	</PropertyGroup>

	<PropertyGroup>
		<Product>Umbraco.Community.CSPManager</Product>
		<PackageId>Umbraco.Community.CSPManager</PackageId>
		<Title>Umbraco.Community.CSPManager</Title>
		<Description>Enabled CSP management with in the Umbraco back office</Description>
		<PackageTags>umbraco plugin package umbraco-marketplace Content-Security-Policy security CSP csp Content Security Policy</PackageTags>
		<RootNamespace>Umbraco.Community.CSPManager</RootNamespace>
		<Authors>Matt Wise</Authors>
		<Copyright>$([System.DateTime]::UtcNow.ToString(`yyyy`)) Â© Matt Wise</Copyright>
		<PackageProjectUrl>https://github.com/Matthew-Wise/Umbraco-CSP-manager</PackageProjectUrl>
		<RepositoryUrl>https://github.com/Matthew-Wise/Umbraco-CSP-manager</RepositoryUrl>
		<PackageReadmeFile>README_nuget.md</PackageReadmeFile>
		<RepositoryType>git</RepositoryType>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageIcon>icon.png</PackageIcon>
		<IncludeSymbols>true</IncludeSymbols>
		<SymbolPackageFormat>snupkg</SymbolPackageFormat>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Umbraco.Cms.Web.Website" Version="16.0.0" />
		<PackageReference Include="Umbraco.Cms.Api.Management" Version="16.0.0" />
    <InternalsVisibleTo Include="Umbraco.Community.CSPManager.Tests"/>
	</ItemGroup>

	<ItemGroup>
		<!-- Don't include the client folder as part of packaging nuget build -->
		<Content Remove="Client\**" />

		<!-- However make the Umbraco-package.json included for dotnet pack or nuget package and visible to the solution -->
		<None Include="Client\public\umbraco-package.json" Pack="false" />

	</ItemGroup>

	<ItemGroup>
		<None Include="..\..\docs\README_nuget.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include="..\..\images\icon.png">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
	</ItemGroup>

	<!--
      1. Install npm packages
      "Inputs" and "Outputs" are used for incremental builds. If all output items are up-to-date, MSBuild
	skips the target.
      The first time the task is executed. Then, it only runs when you change the package.json file.
      Documentation:
	https://learn.microsoft.com/en-us/visualstudio/msbuild/incremental-builds?WT.mc_id=DT-MVP-5003978
   -->
	<Target Name="NpmInstall" Inputs="Client/package.json"
		Outputs="Client/node_modules/.install-stamp">
		<!--
        Use npm install or npm ci depending on RestorePackagesWithLockFile value.
        Uncomment the following lines if you want to use this feature:

        <PropertyGroup>
          <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
        </PropertyGroup>
     -->
		<!--<Exec
		Command="npm ci" WorkingDirectory="Client" Condition="'$(RestorePackagesWithLockFile)' ==
		'true'" />-->
		<Exec Command="npm install" WorkingDirectory="Client"
			Condition="'$(RestorePackagesWithLockFile)' != 'true'" />

		<!-- Write the stamp file, so incremental builds work -->
		<Touch Files="Client/node_modules/.install-stamp" AlwaysCreate="true" />
	</Target>

	<!--
      2. Run npm run build before building the .NET project.
      MSBuild runs NpmInstall before this task because of the DependsOnTargets attribute.
   -->
	<Target Name="NpmRunBuild" DependsOnTargets="NpmInstall" BeforeTargets="BeforeBuild">
		<Exec Command="npm run build" WorkingDirectory="Client" />
	</Target>
</Project>